<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IP Grabber</title>
    <style>
        pre {
            background-color: #272822;
            color: #f8f8f2;
            padding: 10px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/vip">VIP</a></li>
            <li class="breadcrumb-item"><a href="/vip/projects">Projects</a></li>
            <li class="breadcrumb-item active">IP Grabber</li>
        </ol>
    </nav>

    <h3>IP Grabber</h3>
    <p>
        This project starts a web server that creates links to redirect to another address. When the HTTP request reaches our server, the request information is logged, and we get the request IP address, user-agent, and timestamp.
    </p>

    <p>
        Full source code (Golang):
    </p>

    <pre><code>package main

import (
    "html/template"
    "net/http"
    "time"
)

type Request struct {
    UserAgent     string
    RemoteAddr    string
    XForwardedFor string
    CreatedAt     time.Time
}

type Item struct {
    FileName    string
    OriginalURL string
    Requests    []Request
}

// Use a map instead of a database to store the links and requests information
var store = make(map[string]*Item)

func createLinkHandler(w http.ResponseWriter, r *http.Request) {
    if r.Method == "POST" {
        url := r.PostFormValue("url")
        name := r.PostFormValue("name")
        store[name] = &Item{FileName: name, OriginalURL: url}
        http.Redirect(w, r, "/", http.StatusFound)
        return
    }

    html := `<style>input { width:400px; }</style>
             <form method="post">
                 <input type="url" name="url" placeholder="URL of image we want to proxy to" /><br />
                 <input type="text" name="name" placeholder="name to display in shared URL eg: cute_cat.jpg" /><br />
                 <button type="submit">Create link</button>
             </form>`
    _, _ = w.Write([]byte(html))
}

func imageHandler(w http.ResponseWriter, r *http.Request) {
    name := r.URL.Path[len("/images/"):]
    item, found := store[name]
    if !found {
        return
    }

    item.Requests = append(item.Requests, Request{
        UserAgent:     r.UserAgent(),
        RemoteAddr:    r.RemoteAddr,
        XForwardedFor: r.Header.Get("X-Forwarded-For"),
        CreatedAt:     time.Now(),
    })

    store[name] = item
    http.Redirect(w, r, item.OriginalURL, http.StatusFound)
}

func adminHandler(w http.ResponseWriter, r *http.Request) {
    name := r.URL.Path[len("/admin/"):]
    item, found := store[name]
    if !found {
        return
    }

    tmpl, _ := template.New("").Parse(`
<a href="/">Home</a><br /><br />
Link to share: <a href="/images/{{ .FileName }}">/images/{{ .FileName }}</a><br />
<table border="1">
    <tr><th>RemoteAddr</th><th>XForwardedFor</th><th>UserAgent</th><th>CreatedAt</th></tr>
    {{ range .Requests }}
        <tr><td>{{ .RemoteAddr }}</td><td>{{ .XForwardedFor }}</td><td>{{ .UserAgent }}</td><td>{{ .CreatedAt }}</td></tr>
    {{ else }}
        <tr><td colspan="4">no request yet</td></tr>
    {{ end }}
</table>
`)

    _ = tmpl.Execute(w, item)
}

func homeHandler(w http.ResponseWriter, r *http.Request) {
    tmpl, _ := template.New("").Parse(`
<a href="/create-link">Create link</a><br /><br />
<h3>Links:</h3>
{{ range $k, $v := .Store }}
    <a href="/admin/{{ $k }}">{{ $k }}</a><br />
{{ else }}
    <em>no links yet</em>
{{ end }}
`)

    _ = tmpl.Execute(w, struct {
        Store map[string]*Item
    }{store})
}

func main() {
    http.HandleFunc("/create-link", createLinkHandler)
    http.HandleFunc("/images/", imageHandler)
    http.HandleFunc("/admin/", adminHandler)
    http.HandleFunc("/", homeHandler)
    println("starting web server on 127.0.0.1:8080")
    _ = http.ListenAndServe("127.0.0.1:8080", nil)
}
</code></pre>
</body>
</html>
